/**
 * @file system_event_ids.h
 * @brief სისტემური (ბირთვის) ივენთების იდენტიფიკატორები
 * @version 1.0
 * @date 2025-06-24
 * @author Giorgi Magradze
 * @details ეს ჰედერი შეიცავს მხოლოდ იმ აუცილებელ framework-ის ივენთებს,
 *          რომლებიც სისტემურია და არ არის მიბმული კონკრეტულ მოდულზე.
 *          ყველა მოდულისთვის სპეციფიური ივენთი და მოდულებს შორის კომუნიკაცია
 *          უნდა განისაზღვროს შესაბამის მოდულის ჰედერში, რათა შენარჩუნდეს იზოლაცია.
 *
 * @note მოდულებისთვის სპეციფიური ივენთების სანახავად იხილეთ შესაბამისი ჰედერები:
 * - wifi_events.h (WiFi მოდულის ივენთები)
 * - mqtt_events.h (MQTT მოდულის ივენთები)
 * - prov_events.h (Provisioning მოდულის ივენთები)
 * - sensor_events.h (სენსორის ივენთები)
 * - ota_events.h (OTA მოდულის ივენთები)
 * - health_events.h (ჯანმრთელობის მონიტორინგის ივენთები)
 */
#ifndef FMW_SYSTEM_EVENT_IDS_H
#define FMW_SYSTEM_EVENT_IDS_H

/**
 * @brief ბირთვის ივენთების იდენტიფიკატორები, რომლებიც სისტემურია და არ არის მიბმული კონკრეტულ მოდულზე.
 *
 * @details ეს ენუმერაცია შეიცავს მხოლოდ იმ ივენთებს, რომლებიც აუცილებელია ბირთვისთვის და არ არის დამოკიდებული კონკრეტულ მოდულზე.
 *          ყველა მოდულისთვის სპეციფიური ივენთი უნდა განისაზღვროს შესაბამის მოდულის ჰედერში.
 *
 * @note მოდულებისთვის სპეციფიური ივენთების სანახავად იხილეთ შესაბამისი ჰედერები.
 */
typedef enum
{
    // ------------------- ძირითადი სისტემური ივენთები -------------------
    /**
     * @brief გარე წყაროდან მიღებული ზოგადი ბრძანების ივენთი.
     *
     * @details ეს ივენთი წარმოადგენს ცენტრალურ "გეითვეის" სხვადასხვა ბრძანებისთვის,
     *          რომლებიც შეიძლება მოვიდეს სხვადასხვა წყაროდან (MQTT, HTTP, BLE და სხვ.).
     *          მოდულები უსმენენ ამ ივენთს და პარსავენ payload-ს, რათა განსაზღვრონ, ეხებათ თუ არა მათ ეს ბრძანება.
     *          ეს უზრუნველყოფს ბრძანების წყაროსა და სამიზნე მოდულებს შორის "დამოკიდებულების" მინიმიზაციას.
     *
     * @par Payload
     * `telemetry_data_t*` (შეფუთული `event_data_wrapper_t`-ში). `json_data` სტრიქონი შეიცავს ბრძანების დეტალებს.
     */
    FRAMEWORK_EVENT_COMMAND_RECEIVED,

    /**
     * @brief კონფიგურაციის გასაღები განახლდა NVS მეხსიერებაში.
     *
     * @details ეს ივენთი ხდება მას შემდეგ, რაც NVS-ში კონფიგურაციის გასაღები წარმატებით შეიცვლება.
     *          ეს საშუალებას აძლევს მოდულებს დინამიურად, მუშაობის პროცესში გადაეწყონ.
     *          მოდულებმა, რომლებსაც აქვთ კონფიგურირებადი პარამეტრები, უნდა უსმინონ ამ ივენთს და გადაამოწმონ, ეხებათ თუ არა განახლებული გასაღები მათ.
     *
     * @par Payload
     * `config_updated_payload_t*` (შეფუთული `event_data_wrapper_t`-ში). Payload-ში არის `updated_key` სტრიქონი, რომელიც მიუთითებს რომელი გასაღები შეიცვალა.
     */
    FRAMEWORK_EVENT_CONFIG_UPDATED,

    // ------------------- მოდულების მართვის ივენთები -------------------
    /**
     * @brief მოდულის გამორთვის მოთხოვნა runtime-ზე.
     *
     * @details ეს ივენთი საშუალებას იძლევა მოდულის გამორთვა მუშაობის პროცესში. სამიზნე მოდულმა უნდა გააჩეროს ყველა ოპერაცია, გაათავისუფლოს რესურსები (GPIO, მეხსიერება და სხვ.) და შეწყვიტოს ბრძანებებზე პასუხი. ეს არის framework-ის დინამიური მოდულების მართვის ნაწილია.
     *
     * @par Payload
     * `module_disable_payload_t*` (შეფუთული). შეიცავს გასათიშველი მოდულის სახელს.
     */
    FRAMEWORK_EVENT_MODULE_DISABLE_REQUESTED,

    /**
     * @brief მოდულის ჩართვის მოთხოვნა runtime-ზე.
     *
     * @details ეს ივენთი საშუალებას იძლევა ადრე გამორთული მოდულის ჩართვა მუშაობის პროცესში. სამიზნე მოდულმა უნდა გაიაროს ხელახალი ინიციალიზაცია და განაახლოს ნორმალური ოპერაციები. ეს არის framework-ის დინამიური მოდულების მართვის ნაწილია.
     *
     * @par Payload
     * `module_enable_payload_t*` (შეფუთული). შეიცავს ჩასართავი მოდულის სახელს.
     */
    FRAMEWORK_EVENT_MODULE_ENABLE_REQUESTED,

    // --- ეს ელემენტი ყოველთვის უნდა იყოს ბოლო ---
    MAX_CORE_FRAMEWORK_EVENT

} core_framework_event_id_t;

/**
 * @brief მოძველებული ალისის ტიპი უკუ თავსებადობისთვის.
 * @deprecated გამოიყენეთ core_framework_event_id_t ამის ნაცვლად.
 */
typedef core_framework_event_id_t system_event_id_t __attribute__((deprecated("Use core_framework_event_id_t instead")));

#endif // FMW_SYSTEM_EVENT_IDS_H