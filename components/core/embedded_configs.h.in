/**
 * @file embedded_configs.h
 * @brief Auto-generated header for embedded module configurations. DO NOT EDIT.
 * @details This file is generated by CMake. It provides a manifest of all
 *          module config.json files embedded into the firmware.
 */
#ifndef EMBEDDED_CONFIGS_H
#define EMBEDDED_CONFIGS_H

#include <stdint.h>
#include <stddef.h>
#include <string.h> // For strcmp

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Describes a single embedded module configuration file.
 */
typedef struct {
    const char* module_name;    /**< The name of the module (e.g., "relay_actuator"). */
    const uint8_t* start;       /**< Pointer to the start of the embedded binary data. */
    const uint8_t* end;         /**< Pointer to the end of the embedded binary data. */
} embedded_config_t;

// --- Extern declarations for symbols generated by EMBED_FILES ---
@CONFIG_SYMBOLS_DECLARE@

/**
 * @brief A static constant array acting as a manifest of all embedded module configs.
 */
static const embedded_config_t embedded_module_configs[] = {
    @CONFIG_ARRAY_ENTRIES@
    {NULL, NULL, NULL} // Terminator for the array
};

/**
 * @brief Finds an embedded configuration by module name.
 * @param module_name The name of the module to find.
 * @return A pointer to the embedded_config_t struct, or NULL if not found.
 */
static inline const embedded_config_t* find_embedded_module_config(const char* module_name) {
    if (module_name == NULL) {
        return NULL;
    }
    for (int i = 0; embedded_module_configs[i].module_name != NULL; i++) {
        if (strcmp(embedded_module_configs[i].module_name, module_name) == 0) {
            return &embedded_module_configs[i];
        }
    }
    return NULL;
}

/**
 * @brief Gets the size of an embedded configuration.
 * @param config A pointer to the embedded_config_t struct.
 * @return The size of the configuration in bytes, or 0 on error.
 */
static inline size_t get_embedded_config_size(const embedded_config_t* config) {
    if (config == NULL || config->start == NULL || config->end == NULL) {
        return 0;
    }
    return (size_t)(config->end - config->start);
}

#ifdef __cplusplus
}
#endif

#endif // EMBEDDED_CONFIGS_H