/**
 * @file synapse.h
 * @brief Synapse ESP Framework - მთავარი საჯარო ჰედერი.
 * @author Synapse Framework Team
 * @version 1.0.0
 * @date 2025-08-25
 *
 * @details
 * ეს არის Synapse Framework-ის ბირთვის (core) ერთადერთი და მთავარი
 * საჯარო ჰედერ ფაილი. ნებისმიერმა მოდულმა, რომელსაც სჭირდება ფრეიმვორქის
 * საბაზისო სერვისებთან (როგორიცაა Event Bus, Service Locator, Config Manager და ა.შ.)
 * ურთიერთქმედება, უნდა დააინქლუდოს მხოლოდ ეს ერთი ფაილი.
 *
 * ეს "ფასადის" (Facade) პატერნი ამარტივებს მოდულების იმპლემენტაციას და მალავს
 * core კომპონენტის შიდა სტრუქტურასა და დამოკიდებულებებს.
 *
 * @copyright Copyright (c) 2025
 */

#ifndef SYNAPSE_H
#define SYNAPSE_H

#ifdef __cplusplus
extern "C" {
#endif

// =========================================================================
//      1. ფუნდამენტური ტიპები და კონტრაქტები (Fundamental Types & Contracts)
// =========================================================================
// ეს ჰედერები განსაზღვრავს ძირითად სტრუქტურებსა და "ენას", რომლითაც
// მოდულები და ფრეიმვორქი ერთმანეთს ესაუბრებიან.

#include "base_module.h"      // მოდულის საბაზისო სტრუქტურა (module_t) და სიცოცხლის ციკლი.
#include "service_types.h"    // ყველა სერვისის ტიპის ცენტრალიზებული enum (fmw_service_type_t).
#include "framework_events.h" // ფრეიმვორქის სტანდარტული ივენთების სახელები.
#include "event_payloads.h"   // სტანდარტული ივენთების მონაცემთა სტრუქტურები (payloads).

// =========================================================================
//      2. ძირითადი სერვისების API (Core Service APIs)
// =========================================================================
// ეს ჰედერები აცხადებს ფრეიმვორქის მთავარი სერვისების საჯარო ფუნქციებს.

#include "service_locator.h"  // სერვისების რეგისტრაცია და მოძიება (fmw_service_*).
#include "event_bus.h"        // ივენთების გამოქვეყნება და გამოწერა (fmw_event_bus_*).
#include "config_manager.h"   // კონფიგურაციის პარამეტრებზე წვდომა (fmw_config_get_*).
#include "resource_manager.h" // აპარატურული რესურსების (GPIO, I2C) მართვა (fmw_resource_*).
#include "system_manager.h"   // სისტემის მართვის ფუნქციები (fmw_module_*, fmw_system_*).

// =========================================================================
//      3. დამხმარე და შიდა მექანიზმები (Helpers & Internal Mechanisms)
// =========================================================================
// ეს ჰედერები საჭიროა მოდულების გამართული მუშაობისთვის და ფრეიმვორქთან
// სრული ინტეგრაციისთვის.

#include "logging.h"                // ლოგირების TAG-ის განსაზღვრის მაკრო (DEFINE_COMPONENT_TAG).
#include "event_data_wrapper.h"     // ივენთის მონაცემების უსაფრთხო მართვა (fmw_event_data_*).
#include "module_helpers.h"         // სტანდარტული enable/disable/get_status იმპლემენტაციები.
#include "module_factory.h"         // (შიდა გამოყენებისთვის) მოდულების დინამიური შექმნა.
#include "module_registry.h"        // (შიდა გამოყენებისთვის) მოდულების რეესტრზე წვდომა.

// შენიშვნა: generated_module_factory.h და framework_config.h არ არის აქ ჩართული,
// რადგან ისინი, როგორც წესი, გამოიყენება მხოლოდ core-ის შიდა .c ფაილებში
// და არ წარმოადგენს მოდულებისთვის განკუთვნილ საჯარო API-ს.
// system_event_ids.h-ის შიგთავსი გადატანილია framework_events.h-ში.

#ifdef __cplusplus
}
#endif

#endif // SYNAPSE_H